@page "/sleepasandroid/chart"

@inject IJSRuntime JSRuntime
@inject ThemeService Theme

@Count

<div class="row no-print my-3 align-items-center">
    <div class="col">
        <strong class="d-block mb-2">Select your CSV file to generate your list (larger files may take some time to generate and produce less desirable results)</strong>
        <InputFile OnChange="OnFileSelected" />
    </div>
    @if (ShouldRender)
    {
        <div class="col-auto">
            <button class="btn btn-primary" @onclick="() => ShouldRender = false">Edit Filters</button>
        </div>
    }
    else
    {
        <div class="col-auto">
            Bar Colour
        </div>
        <div class="col-auto">
            <input type="text" @bind-value="BarColor" class="form-control" />
        </div>
        <div class="col-auto">
            Start
        </div>
        <div class="col-auto">
            <input type="date" @bind-value="FilterDateRangeStart" class="form-control" />
        </div>
        <div class="col-auto">
            End
        </div>
        <div class="col-auto">
            <input type="date" @bind-value="FilterDateRangeEnd" class="form-control" />
        </div>
        <div class="col-auto">
            Width(px)
        </div>
        <div class="col-auto">
            <input type="number" class="form-control" @bind-value="FilterWidth" />
        </div>
        <div class="col-auto">
            Height(px)
        </div>
        <div class="col-auto">
            <input type="number" class="form-control" @bind-value="FilterHeight" />
        </div>
        <div class="col-auto">
            <button class="btn btn-primary" @onclick="ScaleToViewport">Scale to Viewport</button>
        </div>
        <div class="col-auto">
            <button class="btn btn-primary" @onclick="Render">Render</button>
        </div>
    }
</div>

@Errors

@if (IsLoading)
{
    <div class="loading-indicator-container">
        <LoadingIndicator />
    </div>
}
else
{
    if (ShouldRender)
    {
        var modifier = Width / 25.0;
        var step = (int)Math.Ceiling(Days.Count(d => d.Date >= DateRangeStart && d.Date <= DateRangeEnd) / modifier);
        var stepCounter = 1;
        var first = Days.Where(d => d.Date >= DateRangeStart && d.Date <= DateRangeEnd).FirstOrDefault();
        var index = first == null ? 0 : Days.IndexOf(first);
        var yAxisHeight = (1.0 / 24.0) * 100.0;
        var columnWidth = ((double)1 / (double)Days.Count(d => d.Date >= DateRangeStart && d.Date <= DateRangeEnd)) * 100.0;
        <div style="width: @(Width.ToString(System.Globalization.CultureInfo.GetCultureInfo("en-US")))px; height: @(Height.ToString(System.Globalization.CultureInfo.GetCultureInfo("en-US")))px; display: flex; flex-direction: row">
            <div style="height: 100%; border-right: 1px solid @Theme.BorderColor; border-left: 1px solid @Theme.BorderColor">
                @for (int i = 23; i >= 0; i--)
                {
                    <div style="width: 100%; padding: 0 0.5em; height: @yAxisHeight.ToString(System.Globalization.CultureInfo.GetCultureInfo("en-US"))%; border-bottom: 1px solid @Theme.BorderColor; display: flex; align-items: end; justify-content: right; @(i == 23 ? $"border-top: 1px solid {Theme.BorderColor}" : "")">
                        <div><small>@i:00</small></div>
                    </div>
                }
            </div>
            @foreach (var day in Days.Where(d => d.Date >= DateRangeStart && d.Date <= DateRangeEnd))
            {
                <div style="width: @(columnWidth.ToString(System.Globalization.CultureInfo.GetCultureInfo("en-US")))%; height: 100%; align-items: end; position: relative; @(Days.Last() == day ? "border-right: 1px solid @Theme.BorderColor" : "")">
                    @foreach (var bar in day.Bars.OrderByDescending(b => b.YStart))
                    {
                        <div style="position: absolute; left: 1px; right: 0; top: @((((1440.0 - bar.YEnd) / 1440.0) * 100.0).ToString(System.Globalization.CultureInfo.GetCultureInfo("en-US")))%; height: @((((bar.YEnd - bar.YStart) / 1440.0) * 100.0).ToString(System.Globalization.CultureInfo.GetCultureInfo("en-US")))%; background-color: @BarColor;"></div>
                    }
                    <div style="height: 100%;">
                        @for (int i = 23; i >= 0; i--)
                        {
                            <div style="width: 100%; height: @yAxisHeight.ToString(System.Globalization.CultureInfo.GetCultureInfo("en-US"))%; border-bottom: 1px solid @Theme.BorderColor; @(i == 23 ? $"border-top: 1px solid {Theme.BorderColor};" : "") @(stepCounter % step == 0 ? $"border-right: 1px solid {Theme.BorderColor}" : "")"></div>
                        }
                    </div>
                </div>
                stepCounter++;
            }
        </div>
        <div style="width: @(Width.ToString(System.Globalization.CultureInfo.GetCultureInfo("en-US")))px; display: flex; flex-direction: row; border-bottom: 1px solid @Theme.BorderColor">
            <div style="padding: 0 0.5em; border-left: 1px solid @Theme.BorderColor"><small style="color: @Theme.BackgroundColor">00:00</small></div>
            @for (int i = index; i < index + Days.Count(d => d.Date >= DateRangeStart && d.Date <= DateRangeEnd); i += step)
            {
                <div style="width: @((columnWidth * step).ToString(System.Globalization.CultureInfo.GetCultureInfo("en-US")))%; border-right: 1px solid @Theme.BorderColor; padding: 0.2em; @(i == 0 ? $"border-left: 1px solid {Theme.BorderColor}" : "")">
                    <small>@((MarkupString)Days.ElementAt(i).Date.ToString("d<br />MMM"))</small>
                </div>
            }
        </div>
    }
}

@code
{
    private string Errors { get; set; } = "";
    private bool ShouldRender { get; set; }
    private bool IsLoading { get; set; }
    private IEnumerable<ChartableSleepData> Data { get; set; }
    private List<Day> Days { get; set; }
    private DateTime XStart { get; set; }
    private int XLength { get; set; }
    private int Offset { get; set; } = 13;
    private int Width { get; set; } = 1920;
    private int Height { get; set; } = 1080;
    private DateTime DateRangeStart { get; set; }
    private DateTime DateRangeEnd { get; set; }

    private int FilterWidth { get; set; } = 1920;
    private int FilterHeight { get; set; } = 1080;
    private DateTime FilterDateRangeStart { get; set; }
    private DateTime FilterDateRangeEnd { get; set; }
    private string BarColor { get; set; } = "#4682b4";

    private string Count { get; set; }

    private void Render()
    {
        Width = FilterWidth;
        Height = FilterHeight;
        DateRangeStart = FilterDateRangeStart;
        DateRangeEnd = FilterDateRangeEnd;
        ShouldRender = true;
    }

    private async Task ScaleToViewport()
    {
        var width = await JSRuntime.InvokeAsync<int>("interop.getWindowWidth");
        var height = await JSRuntime.InvokeAsync<int>("interop.getWindowHeight");
        FilterWidth = width - 40;
        FilterHeight = height - 230;
    }

    private async Task OnFileSelected(IFileListEntry[] files)
    {
        IsLoading = true;

        var stream = files[0].Data;     // We're only allowing one file at a time, so will always be at [0]

        using (var memoryStream = new MemoryStream())
        {
            // Stream needs to be copied to avoid an exception (bug with InputFile library)
            await stream.CopyToAsync(memoryStream);
            memoryStream.Seek(0, SeekOrigin.Begin);
            var reader = new StreamReader(memoryStream);

            using (var csv = new CsvReader(reader, System.Globalization.CultureInfo.InvariantCulture))
            {
                csv.Configuration.HasHeaderRecord = false;
                var records = new List<ChartableSleepData>();

                while (csv.Read())
                {
                    var from = csv.GetField(2);
                    var to = csv.GetField(3);

                    if (from.Length == 17 || from.Length == 18)
                    {
                        //Count += from + ", ";
                    }

                    try
                    {
                        //var start = DateTime.ParseExact(from, new string[] { "dd. MM. yyyy h:mm", "dd. MM. yyyy hh:mm" }, System.Globalization.CultureInfo.InvariantCulture);
                        //var end = DateTime.ParseExact(to, new string[] { "dd. MM. yyyy h:mm", "dd. MM. yyyy hh:mm" }, System.Globalization.CultureInfo.InvariantCulture);
                        var start = ParseDate(from);
                        var end = ParseDate(to);
                        records.Add(new ChartableSleepData
                        {
                            StartDateTime = start,
                            EndDateTime = end
                        });
                    }
                    catch (Exception ex)
                    {
                        // Must be a header row or noise data row, don't add to data
                        //if(from.Length == 17 || from.Length == 18)
                        //{
                        //    Count = from + " - " + ex.ToString();
                        //}
                    }
                }

                Data = records.OrderBy(d => d.StartDateTime);

                XStart = Data.First().StartDateTime.Date;
                XLength = (int)(Data.Last().EndDateTime.Date - XStart).TotalDays + 1;
                DateRangeStart = XStart;
                DateRangeEnd = Data.Last().EndDateTime.Date;
                FilterDateRangeStart = DateRangeStart;
                FilterDateRangeEnd = DateRangeEnd;
            }
        }

        Days = new List<Day>();

        for (int i = 0; i < XLength; i++)
        {
            var currentDay = XStart.AddDays(i);
            var nextDay = XStart.AddDays(i + 1);
            var entries = Data
                .Where(d => (d.EndDateTime >= currentDay && d.EndDateTime < nextDay) || (d.StartDateTime >= currentDay && d.StartDateTime < nextDay))
                .OrderBy(d => d.StartDateTime);

            var bars = entries.Select(e => new Bar
            {
                YStart = e.StartDateTime < currentDay ? 0 : e.StartDateTime.TimeOfDay.TotalMinutes,
                YEnd = e.EndDateTime >= nextDay ? 1440 : e.EndDateTime.TimeOfDay.TotalMinutes
            });

            Days.Add(new Day
            {
                Date = currentDay,
                Bars = bars
            });
        }

        IsLoading = false;
        StateHasChanged();
    }

    private DateTime ParseDate(string date)
    {
        // dd. MM. yyyy h:mm
        var day = date.Substring(0, 2);
        var month = date.Substring(4, 2);
        var year = date.Substring(8, 4);
        var hour = date.Substring(13, 2);
        var minute = date.Substring(15);

        if (hour.Contains(":"))
        {
            hour = hour.Substring(0, 1);
        }

        if (minute.Contains(":"))
        {
            minute = minute.Substring(1);
        }

        return new DateTime(int.Parse(year), int.Parse(month), int.Parse(day), int.Parse(hour), int.Parse(minute), 0);
    }
}