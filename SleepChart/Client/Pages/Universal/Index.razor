@page "/universal"

@if (IsLoading)
{
    <div class="container-fluid h-100">
        <div class="row h-100 align-items-center">
            <div class="col-12 text-center">
                <LoadingIndicator />
            </div>
        </div>
    </div>
}
else if (!ShowChart)
{
    <div class="row pt-3">
        <div class="col-12">
            <h4 class="mb-3">Disclaimer</h4>
            <span>
                The universal charter currently lacks the functionality to factor in time zone offsets for applications that store the
                dates/times in UTC. The tool will still work for graphing your sleep and identifying trends, but the times may not
                be accurate in these cases. This functionality will be added in a future release.
            </span>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-12">
            <h4 class="mb-3">Step 1 - Select your CSV File</h4>
            <strong class="d-block mb-2">If your column headers aren't on the first row of your CSV file, you will need to skip any previous rows. Otherwise, leave this set to zero.</strong>
            <label>Number of Rows to Skip</label>
            <input type="text" class="form-control" @bind-value="RowsToSkip" />
            <span class="d-block mb-3 mt-4">This file should contain the sleep records you wish to graph.</span>
            <InputFile OnChange="OnFileSelected" />
        </div>
    </div>

    @if (Headers.Count() > 0)
    {
        <div class="row mt-4">
            <div class="col-12">
                <h4 class="mb-4">Step 2 - Choose Which Fields to Graph</h4>
                <div class="form-group">
                    <label>Choose which field is the time of sleep start</label>
                    <select @bind="StartDateHeader" class="form-control">
                        @foreach (var header in Headers)
                        {
                            <option value="@header">@header</option>
                        }
                    </select>
                </div>
                <div class="form-group">
                    <label>Choose which field is the time of sleep end</label>
                    <select @bind="EndDateHeader" class="form-control">
                        @foreach (var header in Headers)
                        {
                            <option value="@header">@header</option>
                        }
                    </select>
                </div>
                <button class="btn btn-primary" @onclick="Step3">Next</button>
            </div>
        </div>
    }

    @if (ShowStep3)
    {
        <div class="row mt-4">
            <div class="col-12">
                <h4 class="mb-2">Step 3 - Specify Date Format</h4>
                <span class="d-block mb-2">
                    We were unable to automatically detect the format of the date used in the CSV file. Please specify the date format
                    (see the <a href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings">.NET Documentation</a> or contact me if you need help with the format string).
                </span>
                <input type="text" @bind-value="DateFormat" class="form-control" />
                <button class="btn btn-primary mt-3" @onclick="Step4">Next</button>
            </div>
        </div>
    }

    @if (ShowFailureMessage)
    {
        <div class="row mt-4">
            <div class="col-12">
                <strong>Failed to parse dates, please ensure you have specified the Date Format correctly and try again. If you are unable to get this working, please contact me for assistance.</strong>
            </div>
        </div>
    }
}

<div class="@(ShowChart ? "" : "d-none")">
    <UniversalChart @ref="Chart" />
</div>

@code
{
    private UniversalChart Chart { get; set; }
    private bool IsLoading { get; set; }
    private int RowsToSkip { get; set; }
    private IList<string> Headers { get; set; } = new List<string>();
    private bool ShowStep3 { get; set; }
    private IList<ChartableSleepData> Data { get; set; } = new List<ChartableSleepData>();
    private string StartDateHeader { get; set; }
    private string EndDateHeader { get; set; }
    private string DateFormat { get; set; }
    private bool ShowFailureMessage { get; set; }
    private bool ShowChart { get; set; }
    private IList<IList<ValueTuple<string, string>>> DataDictionaries { get; set; } = new List<IList<ValueTuple<string, string>>>();

    private void ProceedToChart()
    {
        Chart.SetData(Data);
        ShowChart = true;
        StateHasChanged();
    }

    private async Task Step4()
    {
        Data = new List<ChartableSleepData>();
        ShowFailureMessage = false;

        var data = DataDictionaries.Select(d => (d.FirstOrDefault(e => e.Item1 == StartDateHeader).Item2, d.FirstOrDefault(e => e.Item1 == EndDateHeader).Item2));

        foreach (var pair in data)
        {
            try
            {
                var startDate = DateTime.ParseExact(pair.Item1, DateFormat, System.Globalization.CultureInfo.InvariantCulture);
                var endDate = DateTime.ParseExact(pair.Item2, DateFormat, System.Globalization.CultureInfo.InvariantCulture);
                Data.Add(new ChartableSleepData
                {
                    StartDateTime = startDate,
                    EndDateTime = endDate
                });
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                ShowFailureMessage = true;
                StateHasChanged();
                return;
            }
        }

        ProceedToChart();
    }

    private void Step3()
    {
        var data = DataDictionaries.Select(d => (d.FirstOrDefault(e => e.Item1 == StartDateHeader).Item2, d.FirstOrDefault(e => e.Item1 == EndDateHeader).Item2));

        foreach (var pair in data)
        {
            try
            {
                var startDate = DateTime.Parse(pair.Item1);
                var endDate = DateTime.Parse(pair.Item2);
                Data.Add(new ChartableSleepData
                {
                    StartDateTime = startDate,
                    EndDateTime = endDate
                });
            }
            catch
            {
                Console.WriteLine("Failure in Step 3");
                ShowStep3 = true;
                return;
            }
        }

        Console.WriteLine("Step 3 completed.");
        Console.WriteLine(Data.Count);
        ProceedToChart();
    }

    private async Task OnFileSelected(IFileListEntry[] files)
    {
        IsLoading = true;

        var stream = files[0].Data;     // We're only allowing one file at a time, so will always be at [0]

        using var memoryStream = new MemoryStream();
        await stream.CopyToAsync(memoryStream);
        memoryStream.Seek(0, SeekOrigin.Begin);
        using var reader = new StreamReader(memoryStream);
        using var csv = new CsvReader(reader, System.Globalization.CultureInfo.InvariantCulture);

        int i = 0;
        csv.Read();

        for (int s = 0; s < RowsToSkip; s++)
        {
            csv.Read();
        }

        while (csv.TryGetField<string>(i, out string field))
        {
            if (field != null)
            {
                Headers.Add(field);
                i++;
            }
        }

        if (Headers.Count() > 1)
        {
            StartDateHeader = Headers.ElementAt(0);
            EndDateHeader = Headers.ElementAt(1);
        }
        else if (Headers.Count() > 0)
        {
            StartDateHeader = Headers.ElementAt(0);
            EndDateHeader = Headers.ElementAt(0);
        }

        while (csv.Read())
        {
            var dictionary = new List<ValueTuple<string, string>>();
            for (int j = 0; j < i; j++)
            {
                (string, string) tuple = (Headers.ElementAt(j), csv.GetField<string>(j));
                dictionary.Add(tuple);
            }

            DataDictionaries.Add(dictionary);
        }

        IsLoading = false;
        StateHasChanged();
    }
}